generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum AccountType {
  free
  plus
  business
  enterprise
}

enum PlanType {
  perMonth
  perYear
  perThreeYears
}

enum PaymentType {
  creditCard
  debitCard
  bankSlip
}

enum Status {
  active
  inactive
  pending
}

enum TypeMessage {
  interaction
  chatStatement
  generalStatement
}

enum KanbanType {
  task
  project
}

enum MediaTypes {
  image
  video
  file
  pdf
  generalArchive
}

enum EmbedTypes {
  image
  youtube
  video
  pdf
  googleDrive
  page
}

enum PagePropsTypes {
  text
  selection
  multi_selection
  number
  date
  formula
  relation
  rollup
  assign
  checkbox
}

// Tables

model User {
  id          String   @id @default(uuid())
  name        String
  password    String?
  email       String   @unique
  icon        String
  preferences Json?
  trash       Boolean? @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  status      Status
  accountType AccountType @map("account_type")
  planType    PlanType    @map("plan_type")
  paymentType PaymentType @map("payment_type")

  page      Page[]
  workspace Workspace[]
  member    Member[]
  chat      Chat[]
}

model Workspace {
  id         String @id @default(uuid())
  databaseId String @map("wkspdb_id")
  userId     String @unique @map("user_id")

  user     User    @relation(fields: [userId], references: [id])
  database DataHub @relation(fields: [databaseId], references: [id])
}

model Page {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.LongText
  ownerId     String   @map("owner_id")
  trash       Boolean? @default(false)

  pageProperties PageProperties[]
  owner          User             @relation(fields: [ownerId], references: [id])
  tool           Tool[]
  chat           Chat[]
}

model DataHub {
  id    String   @id @default(uuid())
  title String?
  trash Boolean? @default(false)

  Workspace Workspace[]
  Kanban    Kanban[]
  Goal      Goal[]

  @@map("data_hub")
}

model PageProperties {
  id    String         @id @default(uuid())
  type  PagePropsTypes
  title String?
  data  Json?
  trash Boolean?       @default(false)

  pageId String @map("page_id")

  page   Page     @relation(fields: [pageId], references: [id])
  member Member[]

  @@map("page_properties")
}

model Member {
  id               String   @id @default(uuid())
  isAdmin          Boolean? @default(false) @map("is_admin")
  userId           String   @map("user_id")
  pagePropertiesId String   @map("page_properties_id")

  user           User           @relation(fields: [userId], references: [id])
  pageProperties PageProperties @relation(fields: [pagePropertiesId], references: [id])
}

model Chat {
  id   String      @id @default(uuid())
  type TypeMessage @default(interaction)

  userId String @map("user_id")
  pageId String @map("page_id")

  user User @relation(fields: [userId], references: [id])
  page Page @relation(fields: [pageId], references: [id])
}

model Tool {
  id         String   @id @default(uuid())
  type       String
  properties Json
  trash      Boolean? @default(false)

  pageId String

  page Page @relation(fields: [pageId], references: [id])
}

model Media {
  id      String     @id @default(uuid())
  type    MediaTypes
  content Bytes      @db.LongBlob
}

model EmbedByLink {
  id   String     @id @default(uuid())
  type EmbedTypes
  url  String

  @@map("embed_by_link")
}

model RichText {
  id      String @id @default(uuid())
  content String

  @@map("rich_text")
}

model CheckList {
  id      String @id @default(uuid())
  content String

  @@map("check_list")
}

model Table {
  id   String @id @default(uuid())
  data Json
}

model Kanban {
  id    String     @id @default(uuid())
  type  KanbanType
  title String

  databaseId String @map("database_id")

  database DataHub @relation(fields: [databaseId], references: [id])
}

model Goal {
  id    String   @id @default(uuid())
  title String
  trash Boolean? @default(false)

  databaseId String @map("database_id")

  database DataHub @relation(fields: [databaseId], references: [id])
}
