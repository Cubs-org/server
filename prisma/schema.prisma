generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum AccountType {
  free
  base
  pro
}

enum PlanType {
  perMonth
  perYear
  perThreeYears
}

enum PaymentType {
  creditCard
  debitCard
  bankSlip
}

enum Status {
  active
  inactive
  pending
}

enum TypeMessage {
  interaction
  chatStatement
  generalStatement
}

enum PagePropsTypes {
  text
  number
  datetime
  formula
  selection
  multi_selection
  relation
  rollup
  assign
  checkbox
  status
  button
  calendar
}

enum BlockTypes {
  kanban_hub
  table_hub
  calendar_hub

  text
  numbered_list
  bulleted_list
  code
  equation
  to_do
  table
  quote

  divider

  image
  video
  file

  embed

  button
  kanban
  page
}

// Tables

model User {
  id          String   @id @default(uuid())
  name        String
  password    String?
  email       String   @unique
  icon        String
  preferences Json?
  trash       Boolean? @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  status      Status
  accountType AccountType @map("account_type")
  planType    PlanType    @map("plan_type")
  paymentType PaymentType @map("payment_type")

  page      Page[]
  workspace Workspace[]
  member    Member[]
  chat      Chat[]

  @@map("user")
}

model Workspace {
  id         String @id @default(uuid())
  databaseId String @map("wkspdb_id")
  userId     String @unique @map("user_id")

  user     User    @relation(fields: [userId], references: [id])
  database DataHub @relation(fields: [databaseId], references: [id])

  @@map("workspace")
}

model Page {
  id        String   @id @default(uuid())
  title     String
  ownerId   String   @map("owner_id")
  datahubId String?  @map("datahub_id")
  trash     Boolean? @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  pageProperties PageProperties[]
  owner          User             @relation(fields: [ownerId], references: [id])
  datahub        DataHub?         @relation(fields: [datahubId], references: [id])
  block           Block[]
  chat           Chat[]
  pinnedCalendar Pinned_Calendar[]

  @@map("page")
}

model DataHub {
  id    String   @id @default(uuid())
  title String?
  data  Json?
  trash Boolean? @default(false)

  Workspace Workspace[]
  Page      Page[]
  // Goal      Goal[]

  @@map("data_hub")
}

model PageProperties {
  id    String         @id @default(uuid())
  type  PagePropsTypes
  title String?
  data  Json?
  trash Boolean?       @default(false)

  pageId String @map("page_id")

  page   Page     @relation(fields: [pageId], references: [id])
  member Member[]

  @@map("page_properties")
}

model Member {
  id               String   @id @default(uuid())
  isAdmin          Boolean? @default(false) @map("is_admin")
  userId           String   @map("user_id")
  pagePropertiesId String   @map("page_properties_id")

  user           User           @relation(fields: [userId], references: [id])
  pageProperties PageProperties @relation(fields: [pagePropertiesId], references: [id])

  @@map("member")
}

model Chat {
  id   String      @id @default(uuid())
  type TypeMessage @default(interaction)

  userId String @map("user_id")
  pageId String @map("page_id")

  user User @relation(fields: [userId], references: [id])
  page Page @relation(fields: [pageId], references: [id])

  @@map("chat")
}

model Block {
  id    Int        @id @default(autoincrement())
  type  BlockTypes
  data  String     @db.LongText
  trash Boolean?   @default(false)
  row Int        @map("row")
  orderY Int    @map("order_y")
  orderX Int      @map("order_x")

  pageId String

  page Page @relation(fields: [pageId], references: [id])

  @@map("block")
}

model Pinned_Calendar {
  id    String   @id @default(uuid())
  title String
  trash Boolean? @default(false)

  pageId String @map("page_id")

  page Page @relation(fields: [pageId], references: [id])

  @@map("pinned_calendar")
}

// model Goal {
//   id    String   @id @default(uuid())
//   title String
//   trash Boolean? @default(false)

//   databaseId String @map("database_id")

//   database DataHub @relation(fields: [databaseId], references: [id])

//   @@map("goal")
// }